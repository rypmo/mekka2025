diff --git a/data/contracts.json b/data/contracts.json
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/data/contracts.json
@@
+{
+  "//": "Map each rarity tier to a Polymarket contract ID. Swap IDs any time.",
+  "common":   "aec15111-f4aa-4c5e-a3b5-0b93f0e6d4b9",
+  "uncommon": "d6e25bbb-0cac-4d8f-9f69-fb6bf4a3af12",
+  "rare":     "26de57e4-77bb-4cb7-84bd-bd612dd2a943",
+  "epic":     "f698e6f3-6332-46b9-9e7a-1a49e9485d4e"
+}

diff --git a/scripts/systems/polymarket_client.gd b/scripts/systems/polymarket_client.gd
new file mode 100644
index 0000000..2222222
--- /dev/null
+++ b/scripts/systems/polymarket_client.gd
@@
+extends Node
+class_name PolymarketClient
+
+# Autoload this script as “PolymarketClient”
+
+const API_URL := "https://www.polymarket.com/api/v3/markets/"
+const CACHE_TTL := 86_400  # 24 h
+
+var _cache := {}  # contract_id : { price: float, timestamp: int }
+
+func get_yes_price(contract_id: String) -> float:
+	# Return cached value if it’s still fresh
+	if _cache.has(contract_id):
+		var entry := _cache[contract_id]
+		if Time.get_unix_time_from_system() - entry.timestamp < CACHE_TTL:
+			return entry.price
+
+	var http := HTTPRequest.new()
+	add_child(http)
+	var err := http.request(API_URL + contract_id)
+	if err != OK:
+		push_warning("Polymarket request failed: %s" % err)
+		return _fallback(contract_id)
+
+	await http.request_completed
+	var body := http.get_body_as_bytes().get_string_from_utf8()
+	var json := JSON.parse_string(body)
+	var price := float(json["market"]["yesPrice"])
+	_cache[contract_id] = { "price": price, "timestamp": Time.get_unix_time_from_system() }
+	http.queue_free()
+	return price
+
+func _fallback(contract_id: String) -> float:
+	# Fair odds (0.5) when API fails
+	if not _cache.has(contract_id):
+		_cache[contract_id] = { "price": 0.5, "timestamp": 0 }
+	return _cache[contract_id].price

diff --git a/scripts/systems/loot_system.gd b/scripts/systems/loot_system.gd
new file mode 100644
index 0000000..3333333
--- /dev/null
+++ b/scripts/systems/loot_system.gd
@@
+extends Node
+class_name LootSystem
+
+# Autoload this script as “LootSystem”
+
+@export var base_weights := { "common": 60.0, "uncommon": 25.0, "rare": 12.0, "epic": 3.0 }
+var current_weights := {}
+
+func _ready():
+	_update_weights_from_polymarket()
+
+func _update_weights_from_polymarket() -> void:
+	var contracts: Dictionary = load("res://data/contracts.json")
+	var total := 0.0
+	for tier in base_weights.keys():
+		var cid: String = contracts[tier]
+		var price := PolymarketClient.get_yes_price(cid)  # 0.0 – 1.0
+		var multiplier := lerp(0.8, 1.2, price)          # 0.8× ? 1.2×
+		current_weights[tier] = base_weights[tier] * multiplier
+		total += current_weights[tier]
+
+	# Normalise so weights sum to 100
+	for tier in current_weights.keys():
+		current_weights[tier] = (current_weights[tier] / total) * 100.0
+
+func roll_tier(rng := RandomNumberGenerator.new()) -> String:
+	var roll := rng.randf_range(0.0, 100.0)
+	var accum := 0.0
+	for tier in current_weights.keys():
+		accum += current_weights[tier]
+		if roll <= accum:
+			return tier
+	return "common"
+
+# Helper: returns a weight snapshot for debugging overlay
+func get_weights() -> Dictionary:
+	return current_weights.duplicate()

diff --git a/project.godot b/project.godot
--- a/project.godot
+++ b/project.godot
@@
 [autoload]
+PolymarketClient="*res://scripts/systems/polymarket_client.gd"
+LootSystem="*res://scripts/systems/loot_system.gd"
